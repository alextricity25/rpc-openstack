---
# Copyright 2014-2017, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
- name: Install Octavia
  hosts: localhost
  tasks:
    - name: Add Overrides
      config_template:
        src: "/etc/openstack_deploy/user_osa_variables_overrides.yml"
        dest: "/etc/openstack_deploy/user_osa_variables_overrides.yml"
        owner: "root"
        group: "root"
        mode: "0644"
        config_overrides: "{{ octavia_config_overrides }}"
        config_type: "yaml"
        list_extend: "{{ list_extend | default(omit) }}"
    - name: Generate Cert Dirs
      file:
        path: "{{ item.path }}"
        state: directory
        mode: "{{ item.mode }}"
      with_items:
        - { path: "{{ cert_dir }}", mode: '0755' }
        - { path: "{{ cert_dir }}/newcerts", mode: '0755'}
        - { path: "{{ cert_dir }}/private", mode: '0700'}
    - name: Generate openssl.conf
      template:
        src: "{{ rpco_base_dir }}/contrib/octavia/openssl.conf.j2"
        dest:  "{{ cert_dir }}/openssl.cnf"
        mode: 0440
    - name: Touch index.txt
      file:
        path: "{{ cert_dir }}/index.txt"
        state: touch
        mode: 0755
    - name: Init serial
      copy:
        content: "01"
        dest: "{{ cert_dir }}/serial"
        force: no
    - name: Create the server CA private and public keypair
      command: >
          openssl genrsa -passout pass:{{ octavia_ca_private_key_passphrase }} -des3 \
          -out {{ octavia_ca_private_key }} {{ cert_key_length_server }}
      args:
        chdir: "{{ cert_dir }}"
        creates: "{{ octavia_ca_private_key }}"
    - name: Create the client CAs private and public keypair
      command: >
          openssl genrsa -passout pass:{{ cert_password_client }} -des3 \
          -out {{ cert_dir }}/private/ca_client_key.pem {{  cert_key_length_client }}
      args:
        chdir: "{{ cert_dir }}"
        creates: "{{ cert_dir }}/private/ca_client_key.pem"
      when: generate_client_cert | bool == True
    - name: Create server CA certificate
      command: >
          openssl req -x509 -passin pass:{{ octavia_ca_private_key_passphrase }} -new -nodes -key {{ octavia_ca_private_key }}  \
          -config {{ cert_dir }}/openssl.cnf \
          -subj "{{ cert_server_ca_subject }}" \
          -days {{ cert_validity_days }} \
          -out {{ octavia_ca_certificate }}
      args:
        chdir: "{{ cert_dir }}"
        creates: "{{ octavia_ca_certificate }}"
    - name: Create client CA certificate
      command: >
          openssl req -x509 -passin pass:{{ cert_password_client }} -new -nodes -key {{ cert_dir }}/private/ca_client_key.pem   \
          -config {{ cert_dir }}/openssl.cnf \
          -subj "{{ cert_client_ca_subject }}" \
          -days {{ cert_validity_days }} \
          -out {{ octavia_client_ca }}
      args:
        chdir: "{{ cert_dir }}"
        creates: "{{ octavia_client_ca }}"
      when: generate_client_cert | bool == True
    - name: Generate a client key and a CSR
      command: >
          openssl req \
          -newkey rsa:{{ cert_key_length_client }} -nodes -keyout client.key \
          -subj "{{ cert_client_req_subject }}" \
          -out client.csr
      args:
        chdir: "{{ cert_dir }}"
      when: generate_client_cert | bool == True
    - name: Sign request
      command: >
        openssl ca -passin pass:{{ cert_password_client }} -config {{ cert_dir }}/openssl.cnf -in client.csr \
        -days {{ cert_validity_days }} -out client-.pem -batch
      args:
        chdir: "{{ cert_dir }}"
      when: generate_client_cert | bool == True
    - name: Generate single pem client.pem
      shell: "cat client-.pem client.key > {{ octavia_client_cert }}"
      args:
        chdir: "{{ cert_dir }}"
      when: generate_client_cert | bool == True
  vars:
    cert_dir: '/var/tmp/certs'
    cert_key_length_server: '4096' # key length
    cert_password_client: 'changeme'
    cert_key_length_client: '4096' # key length
    cert_server_ca_subject: '/C=US/ST=Denial/L=Nowhere/O=Dis/CN=www.example.com' # change this tosomething more real
    cert_validity_days: 1825 # 5 years
    cert_client_ca_subject: '/C=US/ST=Denial/L=Nowhere/O=Dis/CN=www.example.com' # change this tosomething more real
    cert_client_req_subject: '/C=US/ST=Denial/L=Nowhere/O=Dis/CN=www.example.com' # change this tosomething more real
    rpco_base_dir: '/opt/rpc-openstack'
    generate_client_cert: True # generate selff signed client certs
    octavia_config_overrides:
      octavia_loadbalancer_topology: 'ACTIVE_STANDBY'
      octavia_ca_private_key: "{{ cert_dir }}/private/cakey.pem"
      octavia_ca_private_key_passphrase: 'changeme'
      octavia_ca_certificate: "{{ cert_dir }}/ca_server_01.pem"
      octavia_client_ca: "{{ cert_dir }}/ca_01.pem"
      octavia_client_cert: "{{ cert_dir }}/client.pem"
